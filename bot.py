import requests
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import matplotlib.pyplot as plt
import io
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "....")
PLAYER_ID = os.getenv("DOTA2_PLAYER_ID", "....")


# –ó–∞–≥—Ä—É–∑–∫–∞ –≥–µ—Ä–æ–µ–≤ –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
def load_heroes():
    url = "https://api.opendota.com/api/heroes"
    r = requests.get(url)
    heroes = {}
    if r.status_code == 200:
        for hero in r.json():
            heroes[hero["id"]] = hero["localized_name"]
    return heroes


def load_items():
    url = "https://api.opendota.com/api/constants/items"
    r = requests.get(url)
    items = {}
    if r.status_code == 200:
        item_data = r.json()
        for item_id, item_info in item_data.items():
            if isinstance(item_info, dict) and 'id' in item_info:
                items[item_info['id']] = item_info.get('dname', item_id)
    return items


HEROES = load_heroes()
ITEMS = load_items()


def get_profile():
    url = f"https://api.opendota.com/api/players/{PLAYER_ID}"
    r = requests.get(url)
    if r.status_code == 200:
        data = r.json()
        profile = data.get("profile", {})
        mmr = data.get("mmr_estimate", {}).get("estimate", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        return f"üë§ –ù–∏–∫: {profile.get('personaname', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\nüèÜ MMR: {mmr}\nüîó –ü—Ä–æ—Ñ–∏–ª—å: {profile.get('profileurl', f'https://www.opendota.com/players/{PLAYER_ID}')}"
    else:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."


def get_recent_matches(limit=5):
    url = f"https://api.opendota.com/api/players/{PLAYER_ID}/recentMatches"
    r = requests.get(url)
    if r.status_code == 200:
        matches = r.json()[:limit]
        result = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏:\n\n"
        buttons = []
        for match in matches:
            hero_name = HEROES.get(match.get("hero_id"), f"ID {match.get('hero_id')}")
            kills = match.get("kills", 0)
            deaths = match.get("deaths", 0)
            assists = match.get("assists", 0)
            player_slot = match.get("player_slot", 0)
            win = match.get("radiant_win")
            duration = round(match.get("duration", 0) / 60, 1)
            match_id = match.get("match_id")

            outcome = "‚úÖ –ü–æ–±–µ–¥–∞" if (win and player_slot < 128) or (not win and player_slot >= 128) else "‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ"

            result += (
                f"üéÆ –ú–∞—Ç—á {match_id}\n"
                f"–ì–µ—Ä–æ–π: {hero_name}\n"
                f"K/D/A: {kills}/{deaths}/{assists}\n"
                f"‚åõ {duration} –º–∏–Ω\n"
                f"{outcome}\n\n"
            )
            buttons.append([InlineKeyboardButton(f"üìñ –î–µ—Ç–∞–ª–∏ –º–∞—Ç—á–∞ {match_id}", callback_data=f"match_{match_id}")])
        return result, InlineKeyboardMarkup(buttons)
    else:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π.", None


def get_match_details(match_id: int):
    url = f"https://api.opendota.com/api/matches/{match_id}"
    r = requests.get(url)
    if r.status_code == 200:
        data = r.json()
        duration_seconds = data.get("duration", 0)
        duration_minutes = round(duration_seconds / 60, 1)
        radiant_win = data.get("radiant_win")

        players = data.get("players", [])

        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        player_data = next((p for p in players if str(p.get("account_id")) == PLAYER_ID), None)

        if not player_data:
            return "–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —ç—Ç–æ–º –º–∞—Ç—á–µ"

        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
        hero_name = HEROES.get(player_data.get("hero_id"), f"ID {player_data.get('hero_id')}")
        kills = player_data.get("kills", 0)
        deaths = player_data.get("deaths", 0)
        assists = player_data.get("assists", 0)
        gold = player_data.get("gold", 0)
        networth = player_data.get("net_worth", 0)
        level = player_data.get("level", 0)
        xp = player_data.get("total_xp", player_data.get("xp", 0))  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º total_xp
        last_hits = player_data.get("last_hits", 0)
        denies = player_data.get("denies", 0)
        hero_damage = player_data.get("hero_damage", 0)
        tower_damage = player_data.get("tower_damage", 0)
        hero_healing = player_data.get("hero_healing", 0)
        gpm = player_data.get("gold_per_min", 0)
        xpm = player_data.get("xp_per_min", 0)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ—Ä–æ–Ω—É –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        player_slot = player_data.get("player_slot", 0)
        side = "Radiant" if player_slot < 128 else "Dire"
        player_outcome = "‚úÖ –ü–æ–±–µ–¥–∞" if (radiant_win and side == "Radiant") or (
                    not radiant_win and side == "Dire") else "‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ"

        # –ü—Ä–µ–¥–º–µ—Ç—ã —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        item_names = []
        for i in range(6):
            item_id = player_data.get(f"item_{i}")
            if item_id and item_id > 0:
                item_name = ITEMS.get(item_id, f"–ü—Ä–µ–¥–º–µ—Ç {item_id}")
                item_names.append(item_name)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞
        def format_number(num):
            if num >= 1000:
                return f"{num / 1000:.1f}k"
            return str(num)

        return (
            f"üéÆ –ú–∞—Ç—á {match_id}\n"
            f"üßô –ì–µ—Ä–æ–π: {hero_name} ({side})\n"
            f"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç: {player_outcome}\n\n"
            f"‚öîÔ∏è K/D/A: {kills}/{deaths}/{assists}\n"
            f"üí∞ –¢–µ–∫—É—â–µ–µ –∑–æ–ª–æ—Ç–æ: {format_number(gold)}\n"
            f"üíé Networth: {format_number(networth)}\n"
            f"üìä –£—Ä–æ–≤–µ–Ω—å: {level}\n"
            f"üåü –û–ø—ã—Ç: {format_number(xp)}\n"
            f"üéØ –õ–∞—Å—Ç—Ö–∏—Ç—ã/–î–µ–Ω–∞–∏: {last_hits}/{denies}\n"
            f"üìà GPM/XPM: {gpm}/{xpm}\n\n"
            f"üî• –£—Ä–æ–Ω –ø–æ –≥–µ—Ä–æ—è–º: {format_number(hero_damage)}\n"
            f"üè∞ –£—Ä–æ–Ω –ø–æ towers: {format_number(tower_damage)}\n"
            f"‚ù§Ô∏è –õ–µ—á–µ–Ω–∏–µ: {format_number(hero_healing)}\n"
            f"‚åõ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_minutes} –º–∏–Ω\n"
            f"üéí –ü—Ä–µ–¥–º–µ—Ç—ã: {', '.join(item_names) if item_names else '–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤'}"
        )
    else:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–µ."


def get_gold_xp_graph(match_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∑–æ–ª–æ—Ç–∞ –∏ –æ–ø—ã—Ç–∞ –ø–æ –º–∏–Ω—É—Ç–∞–º"""
    url = f"https://api.opendota.com/api/matches/{match_id}"
    r = requests.get(url)

    if r.status_code != 200:
        return None

    data = r.json()
    players = data.get("players", [])

    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    player_data = next((p for p in players if str(p.get("account_id")) == PLAYER_ID), None)

    if not player_data or "gold_t" not in player_data or "xp_t" not in player_data:
        return None

    gold_data = player_data["gold_t"]
    xp_data = player_data["xp_t"]

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(10, 6))
    minutes = list(range(len(gold_data)))

    plt.plot(minutes, gold_data, label='Gold', color='gold', linewidth=2)
    plt.plot(minutes, [x / 100 for x in xp_data], label='XP (divided by 100)', color='blue', linewidth=2)

    plt.xlabel('–ú–∏–Ω—É—Ç—ã')
    plt.ylabel('–ó–Ω–∞—á–µ–Ω–∏—è')
    plt.title(f'Gold –∏ XP –ø–æ –º–∏–Ω—É—Ç–∞–º - –ú–∞—Ç—á {match_id}')
    plt.legend()
    plt.grid(True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=80, bbox_inches='tight')
    buf.seek(0)
    plt.close()

    return buf


def get_win_lose_stats():
    url = f"https://api.opendota.com/api/players/{PLAYER_ID}/wl"
    r = requests.get(url)
    if r.status_code == 200:
        data = r.json()
        win = data.get("win", 0)
        lose = data.get("lose", 0)
        total = win + lose
        winrate = (win / total * 100) if total > 0 else 0
        return f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚úÖ –ü–æ–±–µ–¥: {win}\n‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {lose}\nüèÜ –í–∏–Ω—Ä–µ–π—Ç: {winrate:.1f}%"
    return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"


def get_top_heroes(limit=5):
    url = f"https://api.opendota.com/api/players/{PLAYER_ID}/heroes"
    r = requests.get(url)
    if r.status_code == 200:
        heroes = r.json()[:limit]
        result = "üèÖ –¢–æ–ø –≥–µ—Ä–æ–∏:\n\n"
        for h in heroes:
            hero_name = HEROES.get(h["hero_id"], f"ID {h['hero_id']}")
            games = h["games"]
            wins = h["win"]
            winrate = round(wins / games * 100, 1) if games > 0 else 0
            result += f"{hero_name}: {wins}/{games} –ø–æ–±–µ–¥ ({winrate}%)\n"
        return result
    else:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø –≥–µ—Ä–æ–µ–≤."


def get_peers(limit=5):
    url = f"https://api.opendota.com/api/players/{PLAYER_ID}/peers"
    r = requests.get(url)
    if r.status_code == 200:
        peers = r.json()[:limit]
        result = "üë• –ß–∞—Å—Ç—ã–µ —Å–æ—Ä–∞—Ç–Ω–∏–∫–∏:\n\n"
        for i, peer in enumerate(peers, 1):
            games = peer.get("with_games", 0)
            wins = peer.get("with_win", 0)
            winrate = (wins / games * 100) if games > 0 else 0
            result += f"{i}. {peer.get('personaname', 'Unknown')}\n   –ò–≥—Ä –≤–º–µ—Å—Ç–µ: {games} | –ü–æ–±–µ–¥: {wins} ({winrate:.1f}%)\n"
        return result
    return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("üéÆ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏")],
        [KeyboardButton("üèÖ –¢–æ–ø –≥–µ—Ä–æ–∏"), KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Win/Lose")],
        [KeyboardButton("üë• –ß–∞—Å—Ç—ã–µ —Å–æ—Ä–∞—Ç–Ω–∏–∫–∏"), KeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫ Gold/XP")]
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìä –ü—Ä–æ—Ñ–∏–ª—å":
        await update.message.reply_text(get_profile(), disable_web_page_preview=True)
    elif text == "üéÆ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏":
        matches_text, buttons = get_recent_matches()
        await update.message.reply_text(matches_text, reply_markup=buttons)
    elif text == "üèÖ –¢–æ–ø –≥–µ—Ä–æ–∏":
        await update.message.reply_text(get_top_heroes())
    elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Win/Lose":
        await update.message.reply_text(get_win_lose_stats())
    elif text == "üë• –ß–∞—Å—Ç—ã–µ —Å–æ—Ä–∞—Ç–Ω–∏–∫–∏":
        await update.message.reply_text(get_peers())
    elif text == "üìà –ì—Ä–∞—Ñ–∏–∫ Gold/XP":
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        url = f"https://api.opendota.com/api/players/{PLAYER_ID}/recentMatches"
        r = requests.get(url)
        if r.status_code == 200 and r.json():
            match_id = r.json()[0]["match_id"]
            graph_buf = get_gold_xp_graph(match_id)
            if graph_buf:
                await update.message.reply_photo(photo=graph_buf, caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ Gold/XP –¥–ª—è –º–∞—Ç—á–∞ {match_id}")
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–∞—Ç—á–∞")
        else:
            await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∞—Ç—á–µ–π")
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª ü§î –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("match_"):
        match_id = int(query.data.split("_")[1])
        details = get_match_details(match_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –º–∞—Ç—á–∞
        await query.message.reply_text(details)

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫
        graph_buf = get_gold_xp_graph(match_id)
        if graph_buf:
            await query.message.reply_photo(photo=graph_buf, caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ Gold/XP –¥–ª—è –º–∞—Ç—á–∞ {match_id}")


def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
